/*
  - ABCD, priority rules
  - preprocessors (Sass, Less)
  - frameworks (Bootstrap, Material)
  - BEM (block__element--modifier)
  - flex vs grid
  - units (px, em, rem, %)
*/

// Flexbox (1-dimensional layout system)
.flex-container {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;

  justify-content: center; // horisontal allignment (flex-start, flex-end, center, space-around, space-between)
  align-items: center; // vertical allignment (flex-start, flex-end, center, baseline, stretch)

  & .flex-item {
    order: 1;
    flex: 1 1 100px; // grow shrink basis, default: 0 1 auto
    flex-grow: 1; // distribute extra space, default: 0
    flex-shrink: 3; // defines how box shrinks, default: 1
    flex-basis: 100px; // min width
    align-self: flex-start; // will overwrite vertical align-items (flex-start, flex-end, center)
  }
}

// Grid (2 dimentional layout system)
.grid-container {
  display: grid; // grid | inline-grid
  grid-template-columns: 100px auto 20%; // 3 cols, divide remaining space evenly
  grid-template-rows: auto auto; // 2 rows, divide remaining space evenly

  justify-content: center; // center, start, end, space-evenly, space-around
  align-content: center; // center, start, end, space-evenly, space-around, space-between

  grid-row-gap: 200px;
  grid-column-gap: 150px;
  grid-gap: 200px 150px; // row col

  & .grid-item {
    grid-area: 2 / 1 / span 2 / span 3; // row-start / col-start / row-end / col-end
    grid-column: 1 / 3; // grid-column-start / grid-column-end, == (1 / span 2)
    grid-row: 2 / 3; // grid-row-start / grid-row-end, == (1 / span 2)
  }
}

/* responsive design - media query*/
@media only screen and (max-width: 800px) {
}

/* keyframe, transition, animations */
@keyframes bounce {
}
.keyframe {
  animation: bounce 2s infinite;
}

/* overflow: hidden */

* {
  box-sizing: border-box;
}

#display {
  display: block;
  display: inline;
  display: inline-block;

  display: table;
  display: flex;
  display: grid;

  display: contents;
  display: none;
}

#position {
  position: static;
  position: relative;
  position: absolute;
  position: fixed;
  position: sticky;
}

/* Selectors */
div.p
  div p
  div, p
  div > p
  div + p
  div ~ p
  [attr=value]
  a:hover
  a::before, a::after

/* How to center an element? */
.center-block {
  text-align: center;
  margin: o auto;
}
.center-flex {
  display: flex;
  align-items: center;
  justify-content: center;
}

/* How to style React, what approach you know?
  - global BEM
  - Styled Components
  - CSS Modules
  - Inline styles
*/

// box-sizing: content-box | padding-box | border-box
html {
  box-sizing: border-box;
}
*,
*:before,
*:after {
  box-sizing: inherit;
}
